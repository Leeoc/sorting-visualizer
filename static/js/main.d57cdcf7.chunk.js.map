{"version":3,"sources":["hooks/useWindowDimensions.js","hooks/useDarkMode.js","components/SortingMenu/SortingMenu.js","helpers/resetArray.js","helpers/bubbleSort.js","helpers/mergeSort.js","helpers/quickSort.js","helpers/insertionSort.js","components/SortingVisualizer/SortingVisualizer.js","components/Navbar/Navbar.js","components/Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["useWindowDimensions","hasWindow","window","getWindowDimensions","width","innerWidth","height","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useDarkMode","theme","setTheme","colorTheme","root","document","documentElement","classList","remove","add","SortingMenu","randomize","animationSpeed","bubbleSort","mergeSort","quickSort","insertionSort","metaData","sliderValue","setSliderValue","className","type","onClick","min","max","step","value","onChange","event","target","time","toFixed","iterationCount","id","defaultChecked","resetArray","arrSize","array","i","push","Math","floor","random","inputArr","animations","swapped","arrLength","length","comparison","tmp","swap","getBubbleSortAnimations","arr","startTime","performance","now","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","doMerge","k","j","getMergeSortAnimations","slice","pivot","start","list","a","b","pointer","end","pivotIndex","getQuickSortAnimations","n","current","compare","i1","i2","v1","v2","getInsertionSortAnimations","SortingVisualizer","props","setArray","setAnimationSpeed","setMetaData","renderBars","elArray","getElementsByClassName","Array","from","forEach","el","style","backgroundColor","map","idx","speed","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","animation","newHeight","barTwoNewHeight","color","console","log","Navbar","Footer","Date","getFullYear","href","aria-label","viewBox","fill","xmlns","d","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d57cdcf7.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useWindowDimensions = () => {\n  const hasWindow = typeof window !== \"undefined\";\n\n  const getWindowDimensions = () => {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n    return {\n      width,\n      height,\n    };\n  };\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    if (hasWindow) {\n      const handleResize = () => {\n        setWindowDimensions(getWindowDimensions());\n      };\n\n      window.addEventListener(\"resize\", handleResize);\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, [hasWindow]);\n\n  return windowDimensions;\n};\n\nexport default useWindowDimensions;","import { useEffect, useState } from \"react\";\n\nconst useDarkMode = () => {\n  const [theme, setTheme] = useState(\"light\");\n  const colorTheme = theme === \"light\" ? \"dark\" : \"light\";\n\n  useEffect(\n    () => {\n      const root = window.document.documentElement;\n      root.classList.remove(colorTheme);\n      root.classList.add(theme);\n    },\n    [theme],\n    colorTheme\n  );\n  return [colorTheme, setTheme];\n};\n\nexport default useDarkMode;\n","import React, { useState } from \"react\";\n\nimport useDarkMode from \"../../hooks/useDarkMode\";\nimport \"./SortingMenu.css\";\n\nconst SortingMenu = ({\n  randomize,\n  animationSpeed,\n  bubbleSort,\n  mergeSort,\n  quickSort,\n  insertionSort,\n  metaData,\n}) => {\n  const [sliderValue, setSliderValue] = useState(\"50\");\n  const [colorTheme, setTheme] = useDarkMode();\n  return (\n    <div className=\"h-full w-full p-5 m-5 bg-gray-50 shadow-md dark:bg-gray-800 rounded-lg self-start flex-grow-0 md:w-96 md:h-50\">\n      <h1 className=\"text-center dark:text-gray-50\">Sorting Menu</h1>\n      <div className=\"items-center justify-center\">\n        <h2 className=\"m-2 dark:text-gray-50\">Chart Settings</h2>\n        <button\n          type=\"button\"\n          className=\"font-bold object-center p-2 m-2 rounded-lg bg-blue-600 shadow-sm hover:shadow-md text-white bg-blue-500transition duration-500 ease-in-out hover:bg-blue-600 transform hover:-translate-y-1 hover:scale-110\"\n          onClick={() => randomize()}\n        >\n          Randomize Bars\n        </button>\n        <label className=\"flex flex-col p-2 dark:text-gray-50 mt-1 flex-nowrap sm:flex-wrap\">\n          Iteration Speed\n          <input\n            className=\"rounded-lg overflow-hidden appearance-none bg-gray-400 h-3 w-128 dark:bg-gray-50 mt-1\"\n            type=\"range\"\n            min=\"1\"\n            max=\"100\"\n            step=\"1\"\n            value={sliderValue}\n            onChange={(event) => {\n              animationSpeed(event.target.value);\n              setSliderValue(event.target.value);\n            }}\n          />\n        </label>\n      </div>\n\n      <div className=\"\">\n        <h2 className=\"m-2 dark:text-gray-50\">Algorithms</h2>\n        <button\n          type=\"button\"\n          className=\"font-bold w-20 p-1 m-2 rounded-lg bg-blue-600 shadow-sm hover:shadow-md text-white transition duration-500 ease-in-out hover:bg-blue-600 transform hover:-translate-y-1 hover:scale-110\"\n          onClick={() => bubbleSort()}\n        >\n          Bubble Sort\n        </button>\n        <button\n          type=\"button\"\n          className=\"font-bold w-20 p-1 m-2 rounded-lg bg-blue-600 shadow-sm hover:shadow-md text-white transition duration-500 ease-in-out hover:bg-blue-600 transform hover:-translate-y-1 hover:scale-110\"\n          onClick={() => mergeSort()}\n        >\n          Merge Sort\n        </button>\n        <button\n          type=\"button\"\n          className=\"font-bold w-20 p-1 m-2 rounded-lg bg-blue-600 shadow-sm hover:shadow-md text-white transition duration-500 ease-in-out hover:bg-blue-600 transform hover:-translate-y-1 hover:scale-110\"\n          onClick={() => quickSort()}\n        >\n          Quick Sort\n        </button>\n        <button\n          type=\"button\"\n          className=\"font-bold w-20 p-1 m-2 rounded-lg bg-blue-600 shadow-sm hover:shadow-md text-white transition duration-500 ease-in-out hover:bg-blue-600 transform hover:-translate-y-1 hover:scale-110\"\n          onClick={() => insertionSort()}\n        >\n          Insertion Sort\n        </button>\n      </div>\n\n      <div className=\"divide\">\n        <h2 className=\"m-2 pt-2 dark:text-gray-50\">Algorithm Statistics</h2>\n        <p className=\"ml-4 dark:text-gray-50\">\n          Time taken:{\" \"}\n          <span className=\"bold\">\n            {metaData.time ? `${metaData.time.toFixed(3)}ms` : \"\"}\n          </span>\n        </p>\n        <p className=\"ml-4 dark:text-gray-50\">\n          Iteration Count:\n          <span className=\"bold\">{metaData.iterationCount}</span>\n        </p>\n      </div>\n\n      <div className=\"pt-1\">\n        <h2 className=\"m-2 dark:text-gray-50\">Page Settings</h2>\n        <label className=\"flex items-center cursor-pointer m-3\">\n          <div className=\"relative\">\n            <input\n              id=\"darkToggle\"\n              type=\"checkbox\"\n              className=\"sr-only\"\n              onClick={() => setTheme(colorTheme)}\n              defaultChecked={false}\n            />\n            <div className=\"w-10 h-4 bg-gray-400 dark:bg-gray-50 rounded-full shadow-inner\"></div>\n            <div className=\"dot absolute w-6 h-6 bg-white dark:bg-blue-600 rounded-full shadow -left-1 -top-1 transition\"></div>\n          </div>\n          <div className=\"ml-3 text-gray-700 font-medium dark:text-gray-50\">\n            Too Bright?\n          </div>\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default SortingMenu;\n","\nconst resetArray = (min, max, arrSize = 100) => {\n  let array = [];\n  for (let i = 0; i < arrSize; i++) {\n    array.push(Math.floor(Math.random() * (max - min + 1) + min))\n  }\n  return array\n}\n\nexport default resetArray","let iterationCount = 0;\n\nconst getBubbleSortAnimations = (arr) => {\n  const animations = [];\n  let inputArr = [...arr];\n  if (inputArr.length <= 1) return inputArr;\n\n  const startTime = performance.now();\n  bubbleSort(inputArr, animations);\n  const endTime = performance.now();\n\n  const metaData = {\n    time: endTime - startTime,\n    iterationCount: iterationCount,\n  };\n  return [animations, metaData];\n};\n\nconst bubbleSort = (inputArr, animations) => {\n  let swapped;\n  const arrLength = inputArr.length;\n  do {\n    swapped = false;\n    for (let i = 0; i < arrLength; i++) {\n      iterationCount++;\n      if (inputArr[i + 1]) {\n        animations.push({ comparison: [i, i + 1] });\n      } else {\n        animations.push({ comparison: [i, i] });\n      }\n\n      if (inputArr[i] > inputArr[i + 1]) {\n        let tmp = inputArr[i];\n        inputArr[i] = inputArr[i + 1];\n        inputArr[i + 1] = tmp;\n        swapped = true;\n        animations.push({\n          swap: [\n            [i, inputArr[i]],\n            [i + 1, inputArr[i + 1]],\n          ],\n        });\n      }\n    }\n  } while (swapped);\n  return inputArr;\n};\n\nexport default getBubbleSortAnimations;\n","let iterationCount = 0;\n\nconst getMergeSortAnimations = (arr) => {\n  const animations = [];\n  let array = [...arr];\n\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n\n  const startTime = performance.now();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  const endTime = performance.now();\n\n  const metaData = {\n    time: endTime - startTime,\n    iterationCount: iterationCount,\n  };\n  return [animations, metaData];\n};\n\nconst mergeSortHelper = (\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) => {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n};\n\nconst doMerge = (\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) => {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    iterationCount++;\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    iterationCount++;\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    iterationCount++;\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n};\n\nexport default getMergeSortAnimations;\n","let iterationCount = 0\n\nconst getQuickSortAnimations = (arr) => {\n  const animations = [];\n  let array = [...arr];\n\n  if (array.length <= 1) return array;\n\n  const startTime = performance.now();\n  quickSort(array, animations);\n  const endTime = performance.now();\n\n  const metaData = {\n    time: endTime - startTime,\n    iterationCount: iterationCount,\n  };\n  return [animations.slice(0, -1), metaData];\n};\n\nconst pivot = (arr, animations, start = 0, end = arr.length + 1) => {\n  const swap = (list, a, b) => [list[a], list[b]] = [list[b], list[a]];\n  let pivot = arr[start],\n    pointer = start;\n\n  for (let i = start; i < arr.length; i++) {\n    iterationCount++\n    animations.push({ 'comparison': [i, start] })\n    if (arr[i] < pivot) {\n      // animations.push({ 'swap': [pivot, i] })\n      animations.push({ 'swap': [[start, pivot], [i, arr[i]]] })\n      pointer++;\n      swap(arr, pointer, i);\n    }\n  };\n  swap(arr, start, pointer);\n  animations.push({ 'swap': [[start, arr[start]], [pointer, arr[pointer]]] })\n\n  return pointer;\n}\n\nconst quickSort = (arr, animations, start = 0, end = arr.length) => {\n  let pivotIndex = pivot(arr, animations, start, end);\n  animations.push({ 'pointer': pivotIndex })\n  if (start >= end) return arr;\n  quickSort(arr, animations, start, pivotIndex);\n  quickSort(arr, animations, pivotIndex + 1, end);\n\n  return arr;\n};\n\n\nexport default getQuickSortAnimations","let iterationCount = 0;\n\nconst getInsertionSortAnimations = (arr) => {\n  const animations = [];\n  let inputArr = [...arr];\n\n  const startTime = performance.now();\n  insertionSort(inputArr, animations);\n  const endTime = performance.now();\n\n  const metaData = {\n    time: endTime - startTime,\n    iterationCount: iterationCount,\n  };\n  return [animations, metaData];\n};\n\n// FIXME: Fix issue with final bar not sorting\nconst insertionSort = (inputArr, animations) => {\n  let n = inputArr.length;\n  for (let i = 1; i < n; i++) {\n    // Choosing the first element in our unsorted subarray\n    let current = inputArr[i];\n    animations.push({ comparison: [i, i] });\n    // The last element of our sorted subarray\n    let j = i - 1;\n\n    while (j > -1 && compare(i, j, current, inputArr[j], animations)) {\n      iterationCount++;\n      animations.push({\n        swap: [\n          [j + 1, inputArr[j]],\n          [j, inputArr[j + 1]],\n        ],\n      });\n      inputArr[j + 1] = inputArr[j];\n      j--;\n    }\n    animations.push({\n      swap: [\n        [j + 1, current],\n        [i, inputArr[j + 1]],\n      ],\n    });\n    inputArr[j + 1] = current;\n  }\n  return inputArr;\n};\n\n// TODO: Tidy up this function, those names are nasty\nconst compare = (i1, i2, v1, v2, animations) => {\n  animations.push({ comparison: [i1, i2] });\n  return v1 < v2;\n};\n\nexport default getInsertionSortAnimations;\n","import { React, useEffect, useState } from \"react\"\n\n// Hook imports\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\n\n// Component imports\nimport SortingMenu from \"../SortingMenu/SortingMenu\";\n\n// Helper functions\nimport resetArray from \"../../helpers/resetArray\";\nimport getBubbleSortAnimations from \"../../helpers/bubbleSort\";\nimport getMergeSortAnimations from \"../../helpers/mergeSort\";\nimport getQuickSortAnimations from \"../../helpers/quickSort\";\nimport getInsertionSortAnimations from \"../../helpers/insertionSort\";\n\nconst SortingVisualizer = (props) => {\n  const [array, setArray] = useState([]);\n  const [animationSpeed, setAnimationSpeed] = useState(10);\n  const [metaData, setMetaData] = useState({});\n  const { height, width } = useWindowDimensions();\n\n  const renderBars = () => {\n    const elArray = document.getElementsByClassName(\"array-bar\");\n    Array.from(elArray).forEach((el) => {\n      el.style.backgroundColor = \"\";\n    });\n    setArray(resetArray(5, height - 20, width / 21));\n    setMetaData({});\n  };\n\n  const changeSpeed = (speed) => {\n    setAnimationSpeed(speed);\n  };\n\n  const bubbleSort = () => {\n    const [animations, metaData] = getBubbleSortAnimations(array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      if (animations[i].comparison) {\n        const [barOneIdx, barTwoIdx] = animations[i].comparison;\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = \"#80ff80\";\n          barTwoStyle.backgroundColor = \"#3B82F6\";\n        }, i * animationSpeed);\n      } else if (animations[i].swap) {\n        setTimeout(() => {\n          const animation = animations[i].swap;\n          const [barOneIdx, newHeight] = animation[0];\n          const [barTwoIdx, barTwoNewHeight] = animation[1];\n\n          arrayBars[barOneIdx].style.height = `${newHeight}px`;\n          arrayBars[barTwoIdx].style.height = `${barTwoNewHeight}px`;\n          arrayBars[barOneIdx].style.backgroundColor = \"#80ff80\";\n          arrayBars[barTwoIdx].style.backgroundColor = \"#80ff80\";\n        }, i * animationSpeed);\n      }\n    }\n    setMetaData(metaData);\n  };\n\n  const mergeSort = () => {\n    const [animations, metaData] = getMergeSortAnimations(array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"#3B82F6\" : \"#80ff80\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * animationSpeed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * animationSpeed);\n      }\n    }\n    setMetaData(metaData);\n  };\n\n  const quickSort = () => {\n    const [animations, metaData] = getQuickSortAnimations(array);\n    console.log(animations);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length - 1; i++) {\n      if (animations[i].comparison) {\n        const [barOneIdx, barTwoIdx] = animations[i].comparison;\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = \"#3B82F6\";\n          barTwoStyle.backgroundColor = \"#3B82F6\";\n        }, i * animationSpeed);\n      } else if (animations[i].swap) {\n        setTimeout(() => {\n          const animation = animations[i].swap;\n          const [barOneIdx, newHeight] = animation[0];\n          const [barTwoIdx, barTwoNewHeight] = animation[1];\n\n          arrayBars[barOneIdx].style.height = `${newHeight}px`;\n          arrayBars[barTwoIdx].style.height = `${barTwoNewHeight}px`;\n          arrayBars[barOneIdx].style.backgroundColor = \"#7b68ee\";\n          arrayBars[barTwoIdx].style.backgroundColor = \"#7b68ee\";\n        }, i * animationSpeed);\n      } else if (animations[i].pointer) {\n        setTimeout(() => {\n          const barOneIdx = animations[i].pointer;\n          arrayBars[barOneIdx].style.backgroundColor = \"#80ff80\";\n        }, i * animationSpeed);\n      }\n    }\n    setMetaData(metaData);\n  };\n\n  const insertionSort = () => {\n    const [animations, metaData] = getInsertionSortAnimations(array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      if (animations[i].comparison) {\n        const [barOneIdx, barTwoIdx] = animations[i].comparison;\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = \"#3B82F6\";\n          barTwoStyle.backgroundColor = \"#3B82F6\";\n        }, i * animationSpeed);\n      } else if (animations[i].swap) {\n        setTimeout(() => {\n          const animation = animations[i].swap;\n          const [barOneIdx, newHeight] = animation[0];\n          const [barTwoIdx, barTwoNewHeight] = animation[1];\n\n          arrayBars[barOneIdx].style.height = `${newHeight}px`;\n          arrayBars[barTwoIdx].style.height = `${barTwoNewHeight}px`;\n          arrayBars[barOneIdx].style.backgroundColor = \"#80ff80\";\n          arrayBars[barTwoIdx].style.backgroundColor = \"#80ff80\";\n        }, i * animationSpeed);\n      }\n    }\n    setMetaData(metaData);\n  };\n\n  useEffect(() => {\n    renderBars();\n  }, [width]);\n\n  return (\n    <div>\n      <div className=\"m-5\"></div>\n      <div className=\"flex items-center justify-center place-items-center mb-2 md:flex-nowrap flex-wrap\">\n        <div className=\"container  place-items-center text-center shadow-md p-1  drop-shadow-md dark:bg-gray-800 h-full flex-grow rounded p-1\">\n          {array.map((value, idx) => {\n            return (\n              <div\n                className=\"w-2 bg-blue-500 inline-block mr-1 array-bar\"\n                key={idx}\n                style={{ height: `${value}px` }}\n              ></div>\n            );\n          })}\n        </div>\n        <SortingMenu\n          randomize={renderBars}\n          animationSpeed={changeSpeed}\n          metaData={metaData}\n          bubbleSort={bubbleSort}\n          mergeSort={mergeSort}\n          quickSort={quickSort}\n          insertionSort={insertionSort}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SortingVisualizer","import React from \"react\"\n\nconst Navbar = () => {\n  return (\n    <nav className=\"bg-white shadow dark:bg-gray-800 mb-2\">\n      <div className=\"container px-6 py-4 mx-auto md:flex md:justify-between md:items-center\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"text-2xl font-bold text-gray-800 dark:text-white lg:text-3xl hover:text-gray-700 dark:hover:text-gray-300\">Sorting Visualizer</span>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar","import React from \"react\"\n\nconst Footer = () => {\n  return (\n    <footer className=\"flex flex-col items-center justify-between px-6 py-4 bg-white dark:bg-gray-800 sm:flex-row\">\n      <p className=\"py-2 text-gray-800 dark:text-white sm:py-0\">Lee O'Connell - {new Date().getFullYear()}</p>\n\n      <div className=\"flex -mx-2\">\n        <a href=\"https://www.github.com/leeoc\" className=\"mx-2 text-gray-600 dark:text-gray-300 hover:text-gray-500 dark:hover:text-gray-300\" aria-label=\"Github\">\n          <svg className=\"w-5 h-5 fill-current\" viewBox=\"0 0 24 24\" fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M12.026 2C7.13295 1.99937 2.96183 5.54799 2.17842 10.3779C1.395 15.2079 4.23061 19.893 8.87302 21.439C9.37302 21.529 9.55202 21.222 9.55202 20.958C9.55202 20.721 9.54402 20.093 9.54102 19.258C6.76602 19.858 6.18002 17.92 6.18002 17.92C5.99733 17.317 5.60459 16.7993 5.07302 16.461C4.17302 15.842 5.14202 15.856 5.14202 15.856C5.78269 15.9438 6.34657 16.3235 6.66902 16.884C6.94195 17.3803 7.40177 17.747 7.94632 17.9026C8.49087 18.0583 9.07503 17.99 9.56902 17.713C9.61544 17.207 9.84055 16.7341 10.204 16.379C7.99002 16.128 5.66202 15.272 5.66202 11.449C5.64973 10.4602 6.01691 9.5043 6.68802 8.778C6.38437 7.91731 6.42013 6.97325 6.78802 6.138C6.78802 6.138 7.62502 5.869 9.53002 7.159C11.1639 6.71101 12.8882 6.71101 14.522 7.159C16.428 5.868 17.264 6.138 17.264 6.138C17.6336 6.97286 17.6694 7.91757 17.364 8.778C18.0376 9.50423 18.4045 10.4626 18.388 11.453C18.388 15.286 16.058 16.128 13.836 16.375C14.3153 16.8651 14.5612 17.5373 14.511 18.221C14.511 19.555 14.499 20.631 14.499 20.958C14.499 21.225 14.677 21.535 15.186 21.437C19.8265 19.8884 22.6591 15.203 21.874 10.3743C21.089 5.54565 16.9181 1.99888 12.026 2Z\">\n            </path>\n          </svg>\n        </a>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer","import SortingVisualizer from \"./components/SortingVisualizer/SortingVisualizer\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Footer from \"./components/Footer/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"dark:bg-gray-700\">\n      <Navbar />\n      <div className=\"flex items-center justify-center h-auto p-5\">\n        <SortingVisualizer />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}